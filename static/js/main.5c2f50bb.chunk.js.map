{"version":3,"sources":["utils/ToEmoji.tsx","component/ProgressBar/ProgressBar.tsx","component/Requirements/Requirements.tsx","component/ToggleButton/ToggleButton.tsx","component/Upgrades/Upgrades.tsx","component/Productions/Productions.tsx","component/Items/Items.tsx","component/Storage/Storage.tsx","component/Home/Home.tsx","logo.png","App.tsx","reportWebVitals.ts","index.tsx"],"names":["emoji","wheat","worker","wood","farm","forest","time","quantity","production","ToEmoji","label","title","undefined","ProgressBar","percent","always","children","className","style","width","ToRequirement","r","i","capacity","resource","Requirements","requirements","met","length","map","ToggleButton","onClick","state","icon","ToUpgrade","u","index","aspect","operation","amount","Object","keys","demands","k","requested","requestToggle","ToDemand","Upgrades","upgrades","sort","a","b","ToProduction","item","productionTime","toFixed","Productions","productions","ItemRenderSystem","_","entities","store","getComponent","filter","HasComponent","Store","itemsView","Demand","ProductionList","Supply","e","id","demand","productionList","supply","hasComponent","Upgrade","reduce","acc","push","product","storage","stocks","capacities","p","Math","min","progress","open","working","canWork","maximumActive","handleOpen","handleWorking","setItems","ToItem","hidden","Items","useParams","useState","items","DisplayItem","hasProduction","hasExisted","existed","hasNoDemands","hasAllDemandsCreated","hasProductionUpgrades","hasProductionUpgradesWhichCanBeBuilt","StorageRenderSystem","display","hasRequirements","setStorage","ToStorageView","unique","isUnique","value","to","Storage","addUniqueness","s","thing","_thing","obj","uniqueArray","findIndex","Home","path","isRunning","Update","progressCivAPI","window","setTimeout","App","save","useRef","useMemo","console","log","BaseItems","ProgressCivAPI","itemRenderSystem","storageRenderSystem","Instance","systems","current","Save","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5c2f50bb.chunk.js","sourcesContent":["import { ReactElement } from 'react'\r\n\r\nconst emoji: {[index: string]: string} = {\r\n  wheat: '🌽',\r\n  worker: '💪',\r\n  wood: '🌳',\r\n  farm: '🌾🌾',\r\n  forest: '🌲🌲🌲',\r\n  'large-red-circle': '🔴',\r\n  'large-green-circle': '🟢',\r\n  'allow production': '⚙️',\r\n  'allow demand to be met': '📦',\r\n  time: '⌛',\r\n  quantity: '⬆️',\r\n  'shopping-cart': '🛒',\r\n  production: '⚙️',\r\n  'building-site': '🏗️'\r\n}\r\n\r\nexport function HasEmoji (label: string): boolean {\r\n  return emoji[label] !== undefined\r\n}\r\n\r\nexport default function ToEmoji (label: string): ReactElement {\r\n  return (<span title={label}>{emoji[label] === undefined ? label : emoji[label]}</span>)\r\n}\r\n","import { ReactElement, ReactNode } from 'react'\r\nimport './ProgressBar.css'\r\n\r\ninterface Props {\r\n  percent: number\r\n  always?: boolean\r\n  children?: ReactNode\r\n}\r\n\r\nexport default function ProgressBar ({ percent = 0, always = false, children }: Props): ReactElement {\r\n  return (\r\n    <div className='production-bar' style={{ width: '100%' }}>\r\n      <span className='label'>{children}</span>\r\n      {!always && <div className='production-progress-bar bg-success' style={{ width: `${percent}%` }} />}\r\n      {always && <div className='production-progress-bar bg-success meter always'><span style={{ width: '100%' }}><span /></span></div>}\r\n    </div>\r\n  )\r\n}\r\n","import React, { ReactElement } from 'react'\r\nimport StorageView from '../../interface/StorageView'\r\nimport ToEmoji from '../../utils/ToEmoji'\r\nimport ProgressBar from '../ProgressBar/ProgressBar'\r\nimport './Requirements.css'\r\n\r\ninterface Props {\r\n  requirements?: StorageView[]\r\n  met?: boolean\r\n}\r\n\r\nconst ToRequirement = (r: StorageView, i: number): ReactElement =>\r\n  <div className='requirement' key={i}>\r\n    <ProgressBar percent={(r.quantity / r.capacity) * 100}>\r\n      {r.quantity} / {r.capacity} {ToEmoji(r.resource)}\r\n    </ProgressBar>\r\n  </div>\r\n\r\nexport default function Requirements ({ requirements = [], met = false }: Props): ReactElement {\r\n  if (requirements.length === 0) {\r\n    return (<div className='requirements none' />)\r\n  }\r\n\r\n  return (\r\n    <div className='requirements'>\r\n      {requirements.map(ToRequirement)}\r\n    </div>\r\n  )\r\n}\r\n","import { ReactElement } from 'react'\r\nimport './ToggleButton.css'\r\n\r\ninterface Props {\r\n  onClick: () => void\r\n  state?: boolean\r\n  icon: ReactElement\r\n}\r\n\r\nexport default function ToggleButton ({ onClick = () => {}, state = false, icon }: Props): ReactElement {\r\n  return (\r\n    <div className={`button ${state ? 'open' : 'closed'}`} onClick={onClick}>\r\n      {icon}\r\n    </div>\r\n  )\r\n}\r\n","import React, { ReactElement } from 'react'\r\nimport { UpgradeView } from '../../interface/UpgradeView'\r\nimport ToEmoji from '../../utils/ToEmoji'\r\nimport ToggleButton from '../ToggleButton/ToggleButton'\r\nimport './Upgrades.css'\r\ninterface Props {\r\n  upgrades: UpgradeView[]\r\n}\r\n\r\nconst ToDemand = (k: string, amount: number, u: UpgradeView): ReactElement =>\r\n  <div className='demand' key={k}>\r\n    <div className='resource'>{ToEmoji(k)}</div>\r\n    <div className='amount'>x{amount}</div>\r\n    <ToggleButton icon={ToEmoji('shopping-cart')} state={u.requested} onClick={() => u.requestToggle()} />\r\n  </div>\r\n\r\nconst ToUpgrade = (u: UpgradeView, index: number): ReactElement =>\r\n  <div className='upgrade' key={index}>\r\n    <div className='effect'>\r\n      <div className='aspect'>{ToEmoji(u.aspect)}</div>\r\n      <div className='improvement'>{u.operation}{u.amount}</div>\r\n    </div>\r\n    <div className='demands'>{Object.keys(u.demands).map((k) => ToDemand(k, u.demands[k], u))}</div>\r\n  </div>\r\n\r\nexport default function Upgrades ({ upgrades }: Props): ReactElement {\r\n  return (\r\n    <div className='upgrades'>\r\n      {upgrades\r\n        .sort((a, b) => a.aspect < b.aspect ? 1 : -1)\r\n        .map(ToUpgrade)}\r\n    </div>\r\n  )\r\n}\r\n","import React, { ReactElement } from 'react'\r\nimport { ProductionView } from '../Items/Items'\r\nimport ProgressBar from '../ProgressBar/ProgressBar'\r\nimport './Production.css'\r\n\r\nconst ToProduction = (item: ProductionView, index: number): ReactElement =>\r\n  <div className='production' key={index}>\r\n    <ProgressBar percent={item.percent} always={(item.productionTime / 1000).toFixed(2) === '0.00'} />\r\n  </div>\r\n\r\ninterface Props {\r\n  productions: ProductionView[]\r\n}\r\n\r\nexport default function Productions ({ productions }: Props): ReactElement {\r\n  return (\r\n    <div className='productions'>\r\n      {productions.map(ToProduction)}\r\n    </div>\r\n  )\r\n}\r\n","import { Demand, ProductionList, SingleUpgrade, Store, Supply, Upgrade } from 'progressciv/dist/component'\r\nimport { ISystem, Entity, HasComponent, getComponent, hasComponent } from 'progressciv/dist/utils'\r\nimport React, { ReactElement, useState } from 'react'\r\nimport StorageView from '../../interface/StorageView'\r\nimport ToEmoji, { HasEmoji } from '../../utils/ToEmoji'\r\nimport Requirements from '../Requirements/Requirements'\r\nimport './Items.css'\r\nimport ToggleButton from '../ToggleButton/ToggleButton'\r\nimport { UpgradeView } from '../../interface/UpgradeView'\r\nimport Upgrades from '../Upgrades/Upgrades'\r\nimport Productions from '../Productions/Productions'\r\nimport { useParams } from 'react-router-dom'\r\n\r\nexport class ItemRenderSystem implements ISystem {\r\n  public static setItems: any = () => {}\r\n\r\n  update (_: number, entities: Entity[]): void {\r\n    const store = getComponent(entities\r\n      .filter(HasComponent(Store))[0], Store)\r\n    const items = entities\r\n      .filter(HasComponent(Demand))\r\n      .filter(HasComponent(ProductionList))\r\n      .filter(HasComponent(Supply))\r\n      .map((e) => ({\r\n        id: e.id,\r\n        demand: getComponent(e, Demand),\r\n        productionList: getComponent(e, ProductionList),\r\n        supply: getComponent(e, Supply),\r\n        upgrades: hasComponent(e, Upgrade)\r\n          ? getComponent(e, Upgrade).upgrades\r\n            .reduce<SingleUpgrade[]>((acc, u) => {\r\n            acc.push(u)\r\n            return acc\r\n          }, [])\r\n          : []\r\n      }))\r\n\r\n    const itemsView: ItemView[] = items.map<ItemView>((i) => ({\r\n      id: i.id,\r\n      product: i.supply.product.resource,\r\n      quantity: i.supply.product.quantity,\r\n      storage: store.stocks[i.supply.product.resource],\r\n      capacity: store.capacities[i.supply.product.resource],\r\n      met: i.demand.met,\r\n      productions: i.productionList.productions.map((p) => ({\r\n        percent: Math.min(p.progress / p.productionTime * 100, 100),\r\n        productionTime: p.productionTime\r\n      })),\r\n      open: i.demand.open,\r\n      working: i.demand.working,\r\n      canWork: i.productionList.maximumActive > 0,\r\n      handleOpen: (): void => { i.demand.open = !i.demand.open },\r\n      handleWorking: (): void => { i.demand.working = !i.demand.working },\r\n      requirements: Object.keys(i.demand.demands)\r\n        .map((k) => ({\r\n          resource: k, quantity: i.demand.store.stocks[k] ?? 0, capacity: i.demand.store.capacities[k]\r\n        })),\r\n      upgrades: i.upgrades?.map((u) => ({\r\n        amount: u.amount,\r\n        aspect: u.aspect,\r\n        operation: u.operation,\r\n        demands: u.demands,\r\n        requested: u.requested,\r\n        requestToggle: (): void => {\r\n          u.requested = !u.requested\r\n        }\r\n      }))\r\n    }))\r\n\r\n    ItemRenderSystem.setItems(itemsView)\r\n  }\r\n}\r\n\r\nexport interface ProductionView {\r\n  percent: number\r\n  productionTime: number\r\n}\r\n\r\ninterface ItemView {\r\n  id: string\r\n  product: string\r\n  quantity: number\r\n  storage: number\r\n  capacity: number\r\n  requirements: StorageView[]\r\n  met: boolean\r\n  productions: ProductionView[]\r\n  open: boolean\r\n  working: boolean\r\n  canWork: boolean\r\n  handleOpen: () => void\r\n  handleWorking: () => void\r\n  upgrades: UpgradeView[]\r\n}\r\n\r\nconst ToItem = (item: ItemView, i: number): ReactElement =>\r\n  <div className='item' key={i}>\r\n    {i === 0 &&\r\n      <h1 className='label'>\r\n        {ToEmoji(item.product)} <span hidden={HasEmoji(item.product) === false}>{item.product}</span>\r\n      </h1>}\r\n    <div className='item-details'>\r\n      <div className='storehouse'>\r\n        <div className='open-button'>\r\n          {item.canWork && item.requirements.length > 0 && <ToggleButton icon={ToEmoji('allow demand to be met')} state={item.open} onClick={() => item.handleOpen()} />}\r\n        </div>\r\n        <Requirements requirements={item.requirements} met={item.met} />\r\n      </div>\r\n      <div className='workhouse'>\r\n        <div className='working-button'>\r\n          {item.canWork && <ToggleButton icon={ToEmoji('allow production')} state={item.working} onClick={() => item.handleWorking()} />}\r\n        </div>\r\n        <Productions productions={item.productions} />\r\n      </div>\r\n      <Upgrades upgrades={item.upgrades} />\r\n    </div>\r\n  </div>\r\n\r\ninterface Params {\r\n  id: string\r\n}\r\n\r\nexport default function Items (): ReactElement {\r\n  const { id } = useParams<Params>()\r\n  const [items, setItems] = useState<ItemView[]>([])\r\n  ItemRenderSystem.setItems = setItems\r\n\r\n  return (\r\n    <div id='items'>\r\n      {items.filter((i) => i.product === id).map(ToItem)}\r\n    </div>\r\n  )\r\n}\r\n","import { Demand, ProductionList, Store, Supply, Upgrade } from 'progressciv/dist/component'\r\nimport { Entity, getComponent, hasComponent, HasComponent, ISystem } from 'progressciv/dist/utils/ecs'\r\nimport React, { ReactElement, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport ToEmoji from '../../utils/ToEmoji'\r\nimport ToggleButton from '../ToggleButton/ToggleButton'\r\nimport './Storage.css'\r\n\r\ninterface StorageView {\r\n  display: boolean\r\n  product: string\r\n  amount: number\r\n  capacity: number\r\n  open: boolean\r\n  hasRequirements: boolean\r\n  working: boolean\r\n  canWork: boolean\r\n  handleOpen: () => void\r\n  handleWorking: () => void\r\n}\r\n\r\nconst DisplayItem = (store: Store, i: EntityComponents): boolean => {\r\n  const hasProduction = i.productionList.maximumActive > 0\r\n  const hasExisted = store.existed[i.supply.product.resource]\r\n  const hasNoDemands = Object.keys(i.demand.demands).length === 0\r\n  const hasAllDemandsCreated = Object.keys(i.demand.demands).reduce<boolean>((acc, k) => acc && store.existed[k], true)\r\n  const hasProductionUpgrades = i.upgrades.upgrades.filter((u) => u.aspect === 'production').length > 0\r\n  const hasProductionUpgradesWhichCanBeBuilt = i.upgrades.upgrades\r\n    .filter((u) => u.aspect === 'production')\r\n    .reduce<string[]>((acc, u) => [...acc, ...Object.keys(u.demands)], [])\r\n    .reduce<boolean>((acc, k) => acc && store.existed[k], true)\r\n\r\n  if (hasExisted) {\r\n    return true\r\n  }\r\n\r\n  if (hasProduction && hasNoDemands) {\r\n    return true\r\n  }\r\n\r\n  if (hasProduction && hasAllDemandsCreated) {\r\n    return true\r\n  }\r\n\r\n  if (hasProductionUpgrades && hasProductionUpgradesWhichCanBeBuilt) {\r\n    return true\r\n  }\r\n\r\n  return false\r\n}\r\n\r\ninterface EntityComponents {\r\n  demand: Demand\r\n  productionList: ProductionList\r\n  supply: Supply\r\n  upgrades: Upgrade\r\n}\r\n\r\nexport class StorageRenderSystem implements ISystem {\r\n  public static setStorage: any = () => {}\r\n\r\n  update (_: number, entities: Entity[]): void {\r\n    const store = getComponent(entities\r\n      .filter(HasComponent(Store))[0], Store)\r\n    const items = entities\r\n      .filter(HasComponent(Demand))\r\n      .filter(HasComponent(ProductionList))\r\n      .filter(HasComponent(Supply))\r\n      .map<EntityComponents>((e) => ({\r\n      demand: getComponent(e, Demand),\r\n      productionList: getComponent(e, ProductionList),\r\n      supply: getComponent(e, Supply),\r\n      upgrades: hasComponent(e, Upgrade) ? getComponent(e, Upgrade) : new Upgrade({ upgrades: [] })\r\n    }))\r\n\r\n    const itemsView: StorageView[] = items.map<StorageView>((i) => ({\r\n      display: DisplayItem(store, i),\r\n      product: i.supply.product.resource,\r\n      amount: store.stocks[i.supply.product.resource] ?? 0,\r\n      capacity: store.capacities[i.supply.product.resource],\r\n      open: i.demand.open,\r\n      working: i.demand.working,\r\n      canWork: i.productionList.maximumActive > 0,\r\n      hasRequirements: Object.keys(i.demand.demands).length > 0,\r\n      handleOpen: (): void => { i.demand.open = !i.demand.open },\r\n      handleWorking: (): void => { i.demand.working = !i.demand.working }\r\n    }))\r\n\r\n    StorageRenderSystem.setStorage(itemsView)\r\n  }\r\n}\r\n\r\nconst ToStorageView = (unique: Unique<StorageView>, index: number): ReactElement =>\r\n  <tr key={index}>\r\n    <td className='open-button'>\r\n      {unique.isUnique && unique.value.hasRequirements && unique.value.canWork && <ToggleButton icon={ToEmoji('allow demand to be met')} state={unique.value.open} onClick={() => unique.value.handleOpen()} />}\r\n    </td>\r\n\r\n    <td className='working-button'>\r\n      {unique.isUnique && unique.value.canWork && <ToggleButton icon={ToEmoji('allow production')} state={unique.value.working} onClick={() => unique.value.handleWorking()} />}\r\n    </td>\r\n\r\n    <td className='product'>\r\n      <Link to={`/${unique.value.product}`}>{ToEmoji(unique.value.product)}</Link>\r\n    </td>\r\n    <td className='stockpile'>{unique.value.amount} / {unique.value.capacity}</td>\r\n  </tr>\r\n\r\ninterface Unique<T> {\r\n  value: T\r\n  isUnique: boolean\r\n}\r\n\r\nexport default function Storage (): ReactElement {\r\n  const [storage, setStorage] = useState<StorageView[]>([])\r\n  StorageRenderSystem.setStorage = setStorage\r\n\r\n  const displayedResources = storage.filter((s) => s.display)\r\n\r\n  const addUniqueness = displayedResources.map<Unique<StorageView>>((thing) => {\r\n    const _thing = thing\r\n    return {\r\n      value: thing,\r\n      isUnique: storage.filter(obj => {\r\n        return obj.product === _thing.product\r\n      }).length === 1\r\n    }\r\n  })\r\n\r\n  const uniqueArray = addUniqueness.filter((thing, index) => {\r\n    return index === addUniqueness.findIndex(obj => {\r\n      return obj.value.product === thing.value.product\r\n    })\r\n  })\r\n\r\n  return (\r\n    <table className='storage'>\r\n      <tbody>\r\n        {uniqueArray.map(ToStorageView)}\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n","import React, { ReactElement } from 'react'\r\nimport {\r\n  Switch,\r\n  Route\r\n} from 'react-router-dom'\r\nimport Items from '../Items/Items'\r\nimport Storage from '../Storage/Storage'\r\nimport './Home.css'\r\n\r\nexport default function Home (): ReactElement {\r\n  return (\r\n    <div className='home'>\r\n      <Storage />\r\n      <Switch>\r\n        <Route path='/:id'>\r\n          <Items />\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo.0c78ae67.png\";","import React, { ReactElement, useMemo, useRef } from 'react'\r\nimport { ProgressCivAPI } from 'progressciv'\r\nimport { ItemRenderSystem } from './component/Items/Items'\r\nimport BaseItems from './conf/BaseItems.json'\r\nimport './App.css'\r\nimport Home from './component/Home/Home'\r\nimport { StorageRenderSystem } from './component/Storage/Storage'\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport logo from './logo.png'\r\n\r\nlet isRunning: boolean = false\r\nconst Update = (progressCivAPI: ProgressCivAPI) => () => {\r\n  if (isRunning) {\r\n    isRunning = false\r\n    return\r\n  }\r\n\r\n  progressCivAPI.Update()\r\n  window.setTimeout(Update(progressCivAPI), 25)\r\n}\r\n\r\nfunction App (): ReactElement {\r\n  const save = useRef<() => string>()\r\n\r\n  useMemo(() => {\r\n    console.log('booting game with', { BaseItems })\r\n    const progressCivAPI = new ProgressCivAPI(BaseItems)\r\n    const itemRenderSystem = new ItemRenderSystem()\r\n    const storageRenderSystem = new StorageRenderSystem()\r\n\r\n    progressCivAPI.Instance.systems.push(itemRenderSystem)\r\n    progressCivAPI.Instance.systems.push(storageRenderSystem)\r\n\r\n    save.current = () => progressCivAPI.Save()\r\n    isRunning = true\r\n    window.setTimeout(Update(progressCivAPI), 100)\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      <div className='App-header'>\r\n        <div className='App-logo'>\r\n          <img src={logo} alt='progress civ' />\r\n        </div>\r\n      </div>\r\n      <div className='App'>\r\n        <BrowserRouter>\r\n          <Home />\r\n        </BrowserRouter>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}